// Code generated by oto; DO NOT EDIT.

package <%= def.PackageName %>

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
	"time"
	"fmt"

	"github.com/pkg/errors"
	"github.com/go-resty/resty/v2"
	<%= for (importPath, name) in def.Imports { %><%= name %> "<%= importPath %>"
	<% } %>
)

// Client is used to access Pace services.
type Client struct {
	// RemoteHost is the URL of the remote server that this Client should
	// access.
	RemoteHost  string
	// Debug enables debug on Resty client
	Debug bool
	// Resty
	Resty *resty.Client

<%= for (service) in def.Services { %><%= service.Name %> *<%= service.Name %>
<% } %>
}

// Set the debug flag
func (c *Client) SetDebug(debug bool) {
	c.Debug = debug
	c.Resty.SetDebug(debug)
}

// New makes a new Client.
func New(remoteHost string) *Client {
	c := &Client{
		RemoteHost: remoteHost,
		Resty: resty.New(),
	}
<%= for (service) in def.Services { %>c.<%= service.Name %> = New<%= service.Name %>(c)
<% } %>
	return c
}

<%= for (service) in def.Services { %>
<%= format_comment_text(service.Comment) %>type <%= service.Name %> struct {
	client *Client
}

// New<%= service.Name %> makes a new client for accessing <%= service.Name %> services.
func New<%= service.Name %>(client *Client) *<%= service.Name %> {
	return &<%= service.Name %>{
		client: client,
	}
}

<%= for (method) in service.Methods { %>
<%= format_comment_text(method.Comment) %>func (s *<%= service.Name %>) <%= method.Name %>(ctx context.Context, r *<%= method.InputObject.TypeName %>) (*<%= method.OutputObject.TypeName %>, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "<%= service.Name %>", "<%= method.Name %>")
	result := &<%= method.OutputObject.TypeName %>{}
	resp, err := s.client.Resty.R().
      SetBody(r).
      SetResult(result).
      Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>.<%= method.Name %>")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("<%= service.Name %>.<%= method.Name %>: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}
<% } %>
<% } %>

<%= for (object) in def.Objects { %>
	<%= if (!object.Imported) { %>
		<%= format_comment_text(object.Comment) %>type <%= object.Name %> struct {
			<%= for (field) in object.Fields { %>
				<%= if (field.Name != "Error") { %><%= format_comment_text(field.Comment) %><%= field.Name %> <%= if (field.Type.Multiple == true) { %>[]<% } %><%= field.Type.TypeName %> `json:"<%= field.NameLowerCamel %><%= if (fld.OmitEmpty) { %>,omitempty<% } %>"` <% } else { %><%= format_comment_text(field.Comment) %>error string `json:"-"`<% } %>
			<% } %>
		}
	<% } %>
<% } %>
