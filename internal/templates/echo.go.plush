// Code generated by oto; DO NOT EDIT.

package <%= def.PackageName %>

import (
	"fmt"
	"net/http"
	"github.com/labstack/echo/v4"
	<%= for (importPath, name) in def.Imports { %>
	<%= name %> "<%= importPath %>"
	<% } %>
)

<%= for (service) in def.Services { %>
<%= format_comment_text(service.Comment) %>type <%= service.Name %> interface {
<%= for (method) in service.Methods { %>
	<%= format_comment_text(method.Comment) %><%= method.Name %>(echo.Context, *<%= method.InputObject.TypeName %>) (*<%= method.OutputObject.TypeName %>, error)<% } %>
}
<% } %>

<%= for (service) in def.Services { %>
type <%= camelize_down(service.Name) %>Server struct {
	<%= camelize_down(service.Name) %> <%= service.Name %>
}

// Register adds the <%= service.Name %> to the otohttp.Server.
func Register<%= service.Name %>(e *echo.Group, <%= camelize_down(service.Name) %> <%= service.Name %>) {
	handler := &<%= camelize_down(service.Name) %>Server{
		<%= camelize_down(service.Name) %>: <%= camelize_down(service.Name) %>,
	}
	<%= for (method) in service.Methods { %>e.POST("/<%= service.Name %>.<%= method.Name %>", handler.handle<%= method.Name %>)
	<% } %>}
<%= for (method) in service.Methods { %>
func (s *<%= camelize_down(service.Name) %>Server) handle<%= method.Name %>(c echo.Context) error {
	<%= if (method.Name == "Create") { %>request := &<%= method.InputObject.TypeName %>{} <% } else { %> request := &<%= method.InputObject.TypeName %>{}<% } %>
	if err := c.Bind(request); err != nil {
		return fmt.Errorf("binding request: %w", err)
	}

	response, err := s.<%= camelize_down(service.Name) %>.<%= method.Name %>(c, request)
	if err != nil {
		return fmt.Errorf("handling request: %w", err)
	}

	return c.JSON(http.StatusOK, response)
}
<% } %>
<% } %>
