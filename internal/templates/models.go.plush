// Code generated by oto; DO NOT EDIT.

package <%= def.PackageName %>

import (
	"fmt"
	"net/http"
	"github.com/labstack/echo/v4"
	<%= for (importPath, name) in def.Imports { %>
	<%= name %> "<%= importPath %>"
	<% } %>
)

func setupDatabase(s *Server) error {
	db := &Connection{
		log: s.Logger.Named("db"),
	}

	dbname := s.Config.Name + "_development"
	if s.Config.Production {
		dbname = s.Config.Name + "_production"
	}

	<%= for (object) in def.Objects { %>
	<%= if (object.Metadata["model"] == "true") { %>
	if col, err := grimoire.New[*<%= object.Name %>](s.Config.Mongo, dbname, strings.ToLower("<%= object.Name %>")); err != nil {
		return fmt.Errorf("failed to create <%= object.Name %> collection: %w", err)
	} else {
		db.<%= object.Name %> = col
		grimoire.Indexes(col, &<%= object.Name %>{})
	}
	<% } %>
	<% } %>
	s.db = db
	return nil
}

type Connection struct {
	log *zap.SugaredLogger
	<%= for (object) in def.Objects { %>
	<%= if (object.Metadata["model"] == "true") { %>
	<%= object.Name %> *grimoire.Store[*<%= object.Name %>]
	<% } %>
	<% } %>
}

<%= for (object) in def.Objects { %>
<%= format_comment_text(object.Comment) %>type <%= object.Name %> struct {<%= if (object.Metadata["model"] == "true") { %> // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`<% } %>
	<%= for (field) in object.Fields { %><%= format_comment_text(field.Comment) %><%= field.Name %> <%= if (field.Type.Multiple == true) { %>[]<% } %><%= field.Type.TypeName %> <%= if (object.Metadata["model"] == "true" && len(field.ParsedTags) != 0) {%>`<%= for (tagName, tagValue) in field.ParsedTags { %><%= tagName %>:"<%= tagValue.Value %>" <% } %>`<% } else { %>`json:"<%= field.NameLowerCamel %><%= if (field.OmitEmpty) { %>,omitempty<% } %>"`<% } %>
<% } %>
}
<% } %>
