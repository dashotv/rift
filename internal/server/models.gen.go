// Code generated by oto; DO NOT EDIT.

package server

import (
	"fmt"
	"strings"

	"go.uber.org/zap"

	"github.com/dashotv/grimoire"
)

func setupDatabase(s *Server) error {
	db := &Connection{
		log: s.Logger.Named("db"),
	}

	dbname := s.Config.Name + "_development"
	if s.Config.Production {
		dbname = s.Config.Name + "_production"
	}

	if col, err := grimoire.New[*Minion](s.Config.Mongo, dbname, strings.ToLower("Minion")); err != nil {
		return fmt.Errorf("failed to create Minion collection: %w", err)
	} else {
		db.Minion = col
		grimoire.Indexes(col, &Minion{})
	}

	if col, err := grimoire.New[*MinionAttempt](s.Config.Mongo, dbname, strings.ToLower("MinionAttempt")); err != nil {
		return fmt.Errorf("failed to create MinionAttempt collection: %w", err)
	} else {
		db.MinionAttempt = col
		grimoire.Indexes(col, &MinionAttempt{})
	}

	if col, err := grimoire.New[*Page](s.Config.Mongo, dbname, strings.ToLower("Page")); err != nil {
		return fmt.Errorf("failed to create Page collection: %w", err)
	} else {
		db.Page = col
		grimoire.Indexes(col, &Page{})
	}

	if col, err := grimoire.New[*Video](s.Config.Mongo, dbname, strings.ToLower("Video")); err != nil {
		return fmt.Errorf("failed to create Video collection: %w", err)
	} else {
		db.Video = col
		grimoire.Indexes(col, &Video{})
	}

	if col, err := grimoire.New[*Visit](s.Config.Mongo, dbname, strings.ToLower("Visit")); err != nil {
		return fmt.Errorf("failed to create Visit collection: %w", err)
	} else {
		db.Visit = col
		grimoire.Indexes(col, &Visit{})
	}

	s.db = db
	return nil
}

type Connection struct {
	log *zap.SugaredLogger

	Minion *grimoire.Store[*Minion]

	MinionAttempt *grimoire.Store[*MinionAttempt]

	Page *grimoire.Store[*Page]

	Video *grimoire.Store[*Video]

	Visit *grimoire.Store[*Visit]
}

// Minion tracks jobs in the system
type Minion struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Kind     string           `bson:"kind" json:"kind" `
	Args     string           `json:"args" bson:"args" `
	Status   string           `json:"status" bson:"status" `
	Queue    string           `json:"queue" bson:"queue" `
	Attempts []*MinionAttempt `bson:"attempts" json:"attempts" `
}

// MinionAttempt tracks the attempts made to process a job
type MinionAttempt struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	StartedAt  string   `bson:"started_at" json:"started_at" `
	Duration   float64  `json:"duration" bson:"duration" `
	Status     string   `bson:"status" json:"status" `
	Error      string   `bson:"error" json:"error" `
	Stacktrace []string `json:"stacktrace" bson:"stacktrace" `
}

// Page represents a web page to be scraped and downloaded
type Page struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Name       string `json:"name" `
	URL        string `json:"url" `
	Scraper    string `json:"scraper" `
	Downloader string `json:"downloader" `
}

type Request struct {
	ID    string `json:"id"`
	Limit int    `json:"limit"`
	Skip  int    `json:"skip"`
}

type Response struct {
	Total   int64       `json:"total"`
	Results interface{} `json:"results"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

// Video represents a video to be downloaded
type Video struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Title      string `json:"title" `
	Season     int    `json:"season" `
	Episode    int    `json:"episode" `
	Raw        string `json:"raw" `
	DisplayID  string `json:"display_id" `
	Extension  string `json:"extension" `
	Resolution int    `json:"resolution" `
	Size       int64  `json:"size" `
	Download   string `json:"download" `
	View       string `json:"view" `
	Source     string `json:"source" `
}

// Visit represents a web page to be scraped and downloaded
type Visit struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	PageID string `json:"page_id" `
	URL    string `json:"url" `
}
