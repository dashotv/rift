// Code generated by oto; DO NOT EDIT.

package server

import (
	"fmt"
	"strings"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	"go.uber.org/zap"

	"github.com/dashotv/grimoire"
)

func setupDatabase(s *Server) error {
	db := &Connection{
		log: s.Logger.Named("db"),
	}

	dbname := s.Config.Name + "_development"
	if s.Config.Production {
		dbname = s.Config.Name + "_production"
	}

	if col, err := grimoire.New[*Job](s.Config.Mongo, dbname, strings.ToLower("Job")); err != nil {
		return fmt.Errorf("failed to create Job collection: %w", err)
	} else {
		db.Job = col
		grimoire.Indexes(col, &Job{})
	}

	if col, err := grimoire.New[*Page](s.Config.Mongo, dbname, strings.ToLower("Page")); err != nil {
		return fmt.Errorf("failed to create Page collection: %w", err)
	} else {
		db.Page = col
		grimoire.Indexes(col, &Page{})
	}

	if col, err := grimoire.New[*Video](s.Config.Mongo, dbname, strings.ToLower("Video")); err != nil {
		return fmt.Errorf("failed to create Video collection: %w", err)
	} else {
		db.Video = col
		grimoire.Indexes(col, &Video{})
	}

	if col, err := grimoire.New[*Visit](s.Config.Mongo, dbname, strings.ToLower("Visit")); err != nil {
		return fmt.Errorf("failed to create Visit collection: %w", err)
	} else {
		db.Visit = col
		grimoire.Indexes(col, &Visit{})
	}

	s.db = db
	return nil
}

type Connection struct {
	log *zap.SugaredLogger

	Job *grimoire.Store[*Job]

	Page *grimoire.Store[*Page]

	Video *grimoire.Store[*Video]

	Visit *grimoire.Store[*Visit]
}

// Job tracks jobs in the system
type Job struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Kind     string        `json:"kind" bson:"kind" `
	Args     string        `json:"args" bson:"args" `
	Status   string        `json:"status" bson:"status" `
	Queue    string        `json:"queue" bson:"queue" `
	Attempts []*JobAttempt `bson:"attempts" json:"attempts" `
}

// JobAttempt tracks the attempts made to process a job
type JobAttempt struct {
	StartedAt  string   `json:"started_at"`
	Duration   float64  `json:"duration"`
	Status     string   `json:"status"`
	Error      string   `json:"error"`
	Stacktrace []string `json:"stacktrace"`
}

type JobResponse struct {
	Job *Job `json:"job"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type JobsResponse struct {
	Total   int64  `json:"total"`
	Results []*Job `json:"results"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

// Page represents a web page to be scraped and downloaded
type Page struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Name       string `json:"name" bson:"name" grimoire:"index" `
	URL        string `bson:"url" json:"url" `
	Scraper    string `json:"scraper" bson:"scraper" `
	Downloader string `json:"downloader" bson:"downloader" `
}

type PageResponse struct {
	Page *Page `json:"page"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type PagesResponse struct {
	Total   int64   `json:"total"`
	Results []*Page `json:"results"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type Request struct {
	ID    string `json:"id"`
	Limit int    `json:"limit"`
	Skip  int    `json:"skip"`
}

// Video represents a video to be downloaded
type Video struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Title      string `json:"title" bson:"title" grimoire:"index" `
	Season     int    `json:"season" bson:"season" grimoire:"index" `
	Episode    int    `json:"episode" bson:"episode" grimoire:"index" `
	Raw        string `bson:"raw" json:"raw" `
	DisplayID  string `grimoire:"index" json:"display_id" bson:"display_id" `
	Extension  string `json:"extension" bson:"extension" `
	Resolution int    `json:"resolution" bson:"resolution" `
	Size       int64  `json:"size" bson:"size" `
	Download   string `bson:"download" json:"download" `
	View       string `json:"view" bson:"view" `
	Source     string `json:"source" bson:"source" `
}

type VideoResponse struct {
	Video *Video `json:"video"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type VideosResponse struct {
	Total   int64    `json:"total"`
	Results []*Video `json:"results"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

// Visit represents a web page to be scraped and downloaded
type Visit struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	PageID primitive.ObjectID `json:"page_id" bson:"page_id" grimoire:"index" `
	URL    string             `json:"url" bson:"url" `
}

type VisitResponse struct {
	Visit *Visit `json:"visit"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}

type VisitsResponse struct {
	Total   int64    `json:"total"`
	Results []*Visit `json:"results"`
	// Error is string explaining what went wrong. Empty if everything was fine.
	Error string `json:"error,omitempty"`
}
