// Code generated by oto; DO NOT EDIT.

package server

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
)

type PageService interface {
	Create(echo.Context, *Page) (*Response, error)
	Delete(echo.Context, *Request) (*Response, error)
	Index(echo.Context, *Request) (*Response, error)
	Show(echo.Context, *Request) (*Response, error)
	Update(echo.Context, *Page) (*Response, error)
}

type VideoService interface {
	Create(echo.Context, *Video) (*Response, error)
	Delete(echo.Context, *Request) (*Response, error)
	Index(echo.Context, *Request) (*Response, error)
	Show(echo.Context, *Request) (*Response, error)
	Update(echo.Context, *Video) (*Response, error)
}

type pageServiceServer struct {
	pageService PageService
}

// Register adds the PageService to the otohttp.Server.
func RegisterPageService(e *echo.Group, pageService PageService) {
	handler := &pageServiceServer{
		pageService: pageService,
	}
	e.POST("/PageService.Create", handler.handleCreate)
	e.POST("/PageService.Delete", handler.handleDelete)
	e.POST("/PageService.Index", handler.handleIndex)
	e.POST("/PageService.Show", handler.handleShow)
	e.POST("/PageService.Update", handler.handleUpdate)
}

func (s *pageServiceServer) handleCreate(c echo.Context) error {
	request := &Page{}
	if err := c.Bind(request); err != nil {
		return fmt.Errorf("binding request: %w", err)
	}

	response, err := s.pageService.Create(c, request)
	if err != nil {
		return fmt.Errorf("handling request: %w", err)
	}

	return c.JSON(http.StatusOK, response)
}

func (s *pageServiceServer) handleDelete(c echo.Context) error {
	request := &Request{}
	if err := c.Bind(request); err != nil {
		return fmt.Errorf("binding request: %w", err)
	}

	response, err := s.pageService.Delete(c, request)
	if err != nil {
		return fmt.Errorf("handling request: %w", err)
	}

	return c.JSON(http.StatusOK, response)
}

func (s *pageServiceServer) handleIndex(c echo.Context) error {
	request := &Request{}
	if err := c.Bind(request); err != nil {
		return fmt.Errorf("binding request: %w", err)
	}

	response, err := s.pageService.Index(c, request)
	if err != nil {
		return fmt.Errorf("handling request: %w", err)
	}

	return c.JSON(http.StatusOK, response)
}

func (s *pageServiceServer) handleShow(c echo.Context) error {
	request := &Request{}
	if err := c.Bind(request); err != nil {
		return fmt.Errorf("binding request: %w", err)
	}

	response, err := s.pageService.Show(c, request)
	if err != nil {
		return fmt.Errorf("handling request: %w", err)
	}

	return c.JSON(http.StatusOK, response)
}

func (s *pageServiceServer) handleUpdate(c echo.Context) error {
	request := &Page{}
	if err := c.Bind(request); err != nil {
		return fmt.Errorf("binding request: %w", err)
	}

	response, err := s.pageService.Update(c, request)
	if err != nil {
		return fmt.Errorf("handling request: %w", err)
	}

	return c.JSON(http.StatusOK, response)
}

type videoServiceServer struct {
	videoService VideoService
}

// Register adds the VideoService to the otohttp.Server.
func RegisterVideoService(e *echo.Group, videoService VideoService) {
	handler := &videoServiceServer{
		videoService: videoService,
	}
	e.POST("/VideoService.Create", handler.handleCreate)
	e.POST("/VideoService.Delete", handler.handleDelete)
	e.POST("/VideoService.Index", handler.handleIndex)
	e.POST("/VideoService.Show", handler.handleShow)
	e.POST("/VideoService.Update", handler.handleUpdate)
}

func (s *videoServiceServer) handleCreate(c echo.Context) error {
	request := &Video{}
	if err := c.Bind(request); err != nil {
		return fmt.Errorf("binding request: %w", err)
	}

	response, err := s.videoService.Create(c, request)
	if err != nil {
		return fmt.Errorf("handling request: %w", err)
	}

	return c.JSON(http.StatusOK, response)
}

func (s *videoServiceServer) handleDelete(c echo.Context) error {
	request := &Request{}
	if err := c.Bind(request); err != nil {
		return fmt.Errorf("binding request: %w", err)
	}

	response, err := s.videoService.Delete(c, request)
	if err != nil {
		return fmt.Errorf("handling request: %w", err)
	}

	return c.JSON(http.StatusOK, response)
}

func (s *videoServiceServer) handleIndex(c echo.Context) error {
	request := &Request{}
	if err := c.Bind(request); err != nil {
		return fmt.Errorf("binding request: %w", err)
	}

	response, err := s.videoService.Index(c, request)
	if err != nil {
		return fmt.Errorf("handling request: %w", err)
	}

	return c.JSON(http.StatusOK, response)
}

func (s *videoServiceServer) handleShow(c echo.Context) error {
	request := &Request{}
	if err := c.Bind(request); err != nil {
		return fmt.Errorf("binding request: %w", err)
	}

	response, err := s.videoService.Show(c, request)
	if err != nil {
		return fmt.Errorf("handling request: %w", err)
	}

	return c.JSON(http.StatusOK, response)
}

func (s *videoServiceServer) handleUpdate(c echo.Context) error {
	request := &Video{}
	if err := c.Bind(request); err != nil {
		return fmt.Errorf("binding request: %w", err)
	}

	response, err := s.videoService.Update(c, request)
	if err != nil {
		return fmt.Errorf("handling request: %w", err)
	}

	return c.JSON(http.StatusOK, response)
}
