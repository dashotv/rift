// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package app

import (
	"time"

	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.uber.org/zap"

	"github.com/dashotv/grimoire"
	"github.com/kamva/mgm/v3"
)

func init() {
	initializers = append(initializers, setupDb)
	healthchecks["db"] = checkDb
}

func setupDb(app *Application) error {
	db, err := NewConnector(app)
	if err != nil {
		return err
	}

	app.DB = db
	return nil
}

func checkDb(app *Application) (err error) {
	// TODO: Check DB connection
	return nil
}

type Connector struct {
	Log   *zap.SugaredLogger
	Page  *grimoire.Store[*Page]
	Video *grimoire.Store[*Video]
	Visit *grimoire.Store[*Visit]
}

func connection[T mgm.Model](name string) (*grimoire.Store[T], error) {
	s, err := app.Config.ConnectionFor(name)
	if err != nil {
		return nil, err
	}
	c, err := grimoire.New[T](s.URI, s.Database, s.Collection)
	if err != nil {
		return nil, err
	}
	return c, nil
}

func NewConnector(app *Application) (*Connector, error) {
	page, err := connection[*Page]("page")
	if err != nil {
		return nil, err
	}

	grimoire.Indexes[*Page](page, &Page{})

	video, err := connection[*Video]("video")
	if err != nil {
		return nil, err
	}

	grimoire.Indexes[*Video](video, &Video{})

	visit, err := connection[*Visit]("visit")
	if err != nil {
		return nil, err
	}

	grimoire.Indexes[*Visit](visit, &Visit{})

	c := &Connector{
		Log:   app.Log.Named("db"),
		Page:  page,
		Video: video,
		Visit: visit,
	}

	return c, nil
}

type Page struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	Name        string    `bson:"name" json:"name"`
	URL         string    `bson:"url" json:"url"`
	Scraper     string    `bson:"scraper" json:"scraper"`
	Downloader  string    `bson:"downloader" json:"downloader"`
	Enabled     bool      `bson:"enabled" json:"enabled"`
	ProcessedAt time.Time `bson:"processed_at" json:"processed_at"`
}

type Video struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	PageID     primitive.ObjectID `bson:"page_id" json:"page_id"`
	Title      string             `bson:"title" json:"title"`
	Season     int                `bson:"season" json:"season"`
	Episode    int                `bson:"episode" json:"episode"`
	Raw        string             `bson:"raw" json:"raw"`
	DisplayID  string             `bson:"display_id" json:"display_id"`
	Extension  string             `bson:"extension" json:"extension"`
	Resolution int                `bson:"resolution" json:"resolution"`
	Size       int64              `bson:"size" json:"size"`
	Download   string             `bson:"download" json:"download"`
	View       string             `bson:"view" json:"view"`
	Source     string             `bson:"source" json:"source"`
}

type Visit struct { // model
	grimoire.Document `bson:",inline"` // includes default model settings
	//ID        primitive.ObjectID `bson:"_id,omitempty" json:"id"`
	//CreatedAt time.Time          `bson:"created_at" json:"created_at"`
	//UpdatedAt time.Time          `bson:"updated_at" json:"updated_at"`
	PageID     primitive.ObjectID `bson:"page_id" json:"page_id"`
	URL        string             `bson:"url" json:"url"`
	Error      string             `bson:"error" json:"error"`
	Stacktrace []string           `bson:"stacktrace" json:"stacktrace"`
}
