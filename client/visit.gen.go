// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package client

import (
	"context"
	"fmt"

	"github.com/dashotv/fae"
)

type VisitService struct {
	client *Client
}

// NewVisit makes a new client for accessing Visit services.
func NewVisitService(client *Client) *VisitService {
	return &VisitService{
		client: client,
	}
}

type VisitIndexRequest struct {
	Page  int `json:"page"`
	Limit int `json:"limit"`
}

type VisitIndexResponse struct {
	*Response
	Result []*Visit `json:"result"`
	Total  int64    `json:"total"`
}

func (s *VisitService) Index(ctx context.Context, req *VisitIndexRequest) (*VisitIndexResponse, error) {
	result := &VisitIndexResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("page", fmt.Sprintf("%v", req.Page)).
		SetQueryParam("limit", fmt.Sprintf("%v", req.Limit)).
		Get("/visit/")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type VisitCreateRequest struct {
	Subject *Visit `json:"subject"`
}

type VisitCreateResponse struct {
	*Response
	Result *Visit `json:"result"`
}

func (s *VisitService) Create(ctx context.Context, req *VisitCreateRequest) (*VisitCreateResponse, error) {
	result := &VisitCreateResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		Post("/visit/")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type VisitShowRequest struct {
	Id string `json:"id"`
}

type VisitShowResponse struct {
	*Response
	Result *Visit `json:"result"`
}

func (s *VisitService) Show(ctx context.Context, req *VisitShowRequest) (*VisitShowResponse, error) {
	result := &VisitShowResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("id", fmt.Sprintf("%v", req.Id)).
		Get("/visit/{id}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type VisitUpdateRequest struct {
	Id      string `json:"id"`
	Subject *Visit `json:"subject"`
}

type VisitUpdateResponse struct {
	*Response
	Result *Visit `json:"result"`
}

func (s *VisitService) Update(ctx context.Context, req *VisitUpdateRequest) (*VisitUpdateResponse, error) {
	result := &VisitUpdateResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("id", fmt.Sprintf("%v", req.Id)).
		Put("/visit/{id}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type VisitSettingsRequest struct {
	Id      string   `json:"id"`
	Setting *Setting `json:"setting"`
}

type VisitSettingsResponse struct {
	*Response
	Result *Visit `json:"result"`
}

func (s *VisitService) Settings(ctx context.Context, req *VisitSettingsRequest) (*VisitSettingsResponse, error) {
	result := &VisitSettingsResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("id", fmt.Sprintf("%v", req.Id)).
		Patch("/visit/{id}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type VisitDeleteRequest struct {
	Id string `json:"id"`
}

type VisitDeleteResponse struct {
	*Response
	Result *Visit `json:"result"`
}

func (s *VisitService) Delete(ctx context.Context, req *VisitDeleteRequest) (*VisitDeleteResponse, error) {
	result := &VisitDeleteResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("id", fmt.Sprintf("%v", req.Id)).
		Delete("/visit/{id}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}
