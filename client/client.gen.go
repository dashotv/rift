// Code generated by oto; DO NOT EDIT.

package client

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-resty/resty/v2"
	"github.com/pkg/errors"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// Client is used to access Pace services.
type Client struct {
	// RemoteHost is the URL of the remote server that this Client should
	// access.
	RemoteHost string
	// Debug enables debug on Resty client
	Debug bool
	// Resty
	Resty *resty.Client

	JobService   *JobService
	PageService  *PageService
	VideoService *VideoService
	VisitService *VisitService
}

// Set the debug flag
func (c *Client) SetDebug(debug bool) {
	c.Debug = debug
	c.Resty.SetDebug(debug)
}

// New makes a new Client.
func New(remoteHost string) *Client {
	c := &Client{
		RemoteHost: remoteHost,
		Resty:      resty.New(),
	}
	c.JobService = NewJobService(c)
	c.PageService = NewPageService(c)
	c.VideoService = NewVideoService(c)
	c.VisitService = NewVisitService(c)

	return c
}

type JobService struct {
	client *Client
}

// NewJobService makes a new client for accessing JobService services.
func NewJobService(client *Client) *JobService {
	return &JobService{
		client: client,
	}
}

func (s *JobService) Create(ctx context.Context, r *Request) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "JobService", "Create")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "JobService.Create")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("JobService.Create: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

func (s *JobService) Index(ctx context.Context, r *Request) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "JobService", "Index")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "JobService.Index")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("JobService.Index: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

type PageService struct {
	client *Client
}

// NewPageService makes a new client for accessing PageService services.
func NewPageService(client *Client) *PageService {
	return &PageService{
		client: client,
	}
}

func (s *PageService) Create(ctx context.Context, r *Page) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "PageService", "Create")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "PageService.Create")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("PageService.Create: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

func (s *PageService) Delete(ctx context.Context, r *Request) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "PageService", "Delete")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "PageService.Delete")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("PageService.Delete: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

func (s *PageService) Index(ctx context.Context, r *Request) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "PageService", "Index")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "PageService.Index")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("PageService.Index: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

func (s *PageService) Show(ctx context.Context, r *Request) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "PageService", "Show")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "PageService.Show")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("PageService.Show: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

func (s *PageService) Update(ctx context.Context, r *Page) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "PageService", "Update")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "PageService.Update")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("PageService.Update: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

type VideoService struct {
	client *Client
}

// NewVideoService makes a new client for accessing VideoService services.
func NewVideoService(client *Client) *VideoService {
	return &VideoService{
		client: client,
	}
}

func (s *VideoService) Create(ctx context.Context, r *Video) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "VideoService", "Create")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "VideoService.Create")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("VideoService.Create: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

func (s *VideoService) Delete(ctx context.Context, r *Request) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "VideoService", "Delete")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "VideoService.Delete")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("VideoService.Delete: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

func (s *VideoService) Index(ctx context.Context, r *Request) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "VideoService", "Index")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "VideoService.Index")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("VideoService.Index: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

func (s *VideoService) Show(ctx context.Context, r *Request) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "VideoService", "Show")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "VideoService.Show")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("VideoService.Show: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

func (s *VideoService) Update(ctx context.Context, r *Video) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "VideoService", "Update")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "VideoService.Update")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("VideoService.Update: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

type VisitService struct {
	client *Client
}

// NewVisitService makes a new client for accessing VisitService services.
func NewVisitService(client *Client) *VisitService {
	return &VisitService{
		client: client,
	}
}

func (s *VisitService) Create(ctx context.Context, r *Visit) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "VisitService", "Create")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "VisitService.Create")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("VisitService.Create: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

func (s *VisitService) Delete(ctx context.Context, r *Request) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "VisitService", "Delete")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "VisitService.Delete")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("VisitService.Delete: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

func (s *VisitService) Index(ctx context.Context, r *Request) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "VisitService", "Index")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "VisitService.Index")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("VisitService.Index: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

func (s *VisitService) Show(ctx context.Context, r *Request) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "VisitService", "Show")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "VisitService.Show")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("VisitService.Show: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

func (s *VisitService) Update(ctx context.Context, r *Visit) (*Response, error) {
	url := fmt.Sprintf("%s/%s.%s", s.client.RemoteHost, "VisitService", "Update")
	result := &Response{}
	resp, err := s.client.Resty.R().
		SetBody(r).
		SetResult(result).
		Post(url)

	if err != nil {
		return nil, errors.Wrap(err, "VisitService.Update")
	}
	if resp.StatusCode() != http.StatusOK {
		return nil, errors.Errorf("VisitService.Update: (%d) %v", resp.StatusCode(), string(resp.Body()))
	}
	if result.error != "" {
		return nil, errors.New(result.error)
	}

	return result, nil
}

// Job tracks jobs in the system
type Job struct {
	Kind string `json:"kind"`

	Args string `json:"args"`

	Status string `json:"status"`

	Queue string `json:"queue"`

	Attempts []*JobAttempt `json:"attempts"`
}

// JobAttempt tracks the attempts made to process a job
type JobAttempt struct {
	StartedAt string `json:"started_at"`

	Duration float64 `json:"duration"`

	Status string `json:"status"`

	error string `json:"-"`

	Stacktrace []string `json:"stacktrace"`
}

// Page represents a web page to be scraped and downloaded
type Page struct {
	Name string `json:"name"`

	URL string `json:"url"`

	Scraper string `json:"scraper"`

	Downloader string `json:"downloader"`
}

type Request struct {
	ID string `json:"id"`

	Limit int `json:"limit"`

	Skip int `json:"skip"`
}

type Response struct {
	Total int64 `json:"total"`

	Results interface{} `json:"results"`

	// Error is string explaining what went wrong. Empty if everything was fine.
	error string `json:"-"`
}

// Video represents a video to be downloaded
type Video struct {
	Title string `json:"title"`

	Season int `json:"season"`

	Episode int `json:"episode"`

	Raw string `json:"raw"`

	DisplayID string `json:"display_id"`

	Extension string `json:"extension"`

	Resolution int `json:"resolution"`

	Size int64 `json:"size"`

	Download string `json:"download"`

	View string `json:"view"`

	Source string `json:"source"`
}

// Visit represents a web page to be scraped and downloaded
type Visit struct {
	PageID primitive.ObjectID `json:"page_id"`

	URL string `json:"url"`
}
