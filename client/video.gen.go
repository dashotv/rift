// Code generated by github.com/dashotv/golem. DO NOT EDIT.
package client

import (
	"context"
	"fmt"

	"github.com/dashotv/fae"
)

type VideoService struct {
	client *Client
}

// NewVideo makes a new client for accessing Video services.
func NewVideoService(client *Client) *VideoService {
	return &VideoService{
		client: client,
	}
}

type VideoIndexRequest struct {
	Page  int `json:"page"`
	Limit int `json:"limit"`
}

type VideoIndexResponse struct {
	*Response
	Result []*Video `json:"result"`
	Total  int64    `json:"total"`
}

func (s *VideoService) Index(ctx context.Context, req *VideoIndexRequest) (*VideoIndexResponse, error) {
	result := &VideoIndexResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetQueryParam("page", fmt.Sprintf("%v", req.Page)).
		SetQueryParam("limit", fmt.Sprintf("%v", req.Limit)).
		Get("/video/")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type VideoCreateRequest struct {
	Subject *Video `json:"subject"`
}

type VideoCreateResponse struct {
	*Response
	Result *Video `json:"result"`
}

func (s *VideoService) Create(ctx context.Context, req *VideoCreateRequest) (*VideoCreateResponse, error) {
	result := &VideoCreateResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		Post("/video/")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type VideoShowRequest struct {
	ID string `json:"id"`
}

type VideoShowResponse struct {
	*Response
	Result *Video `json:"result"`
}

func (s *VideoService) Show(ctx context.Context, req *VideoShowRequest) (*VideoShowResponse, error) {
	result := &VideoShowResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("id", fmt.Sprintf("%v", req.ID)).
		Get("/video/{id}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type VideoUpdateRequest struct {
	ID      string `json:"id"`
	Subject *Video `json:"subject"`
}

type VideoUpdateResponse struct {
	*Response
	Result *Video `json:"result"`
}

func (s *VideoService) Update(ctx context.Context, req *VideoUpdateRequest) (*VideoUpdateResponse, error) {
	result := &VideoUpdateResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("id", fmt.Sprintf("%v", req.ID)).
		Put("/video/{id}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type VideoSettingsRequest struct {
	ID      string   `json:"id"`
	Setting *Setting `json:"setting"`
}

type VideoSettingsResponse struct {
	*Response
	Result *Video `json:"result"`
}

func (s *VideoService) Settings(ctx context.Context, req *VideoSettingsRequest) (*VideoSettingsResponse, error) {
	result := &VideoSettingsResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("id", fmt.Sprintf("%v", req.ID)).
		Patch("/video/{id}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}

type VideoDeleteRequest struct {
	ID string `json:"id"`
}

type VideoDeleteResponse struct {
	*Response
	Result *Video `json:"result"`
}

func (s *VideoService) Delete(ctx context.Context, req *VideoDeleteRequest) (*VideoDeleteResponse, error) {
	result := &VideoDeleteResponse{Response: &Response{}}
	resp, err := s.client.Resty.R().
		SetContext(ctx).
		SetBody(req).
		SetResult(result).
		SetPathParam("id", fmt.Sprintf("%v", req.ID)).
		Delete("/video/{id}")
	if err != nil {
		return nil, fae.Wrap(err, "failed to make request")
	}
	if !resp.IsSuccess() {
		return nil, fae.Errorf("%d: %v", resp.StatusCode(), resp.String())
	}
	if result.Error {
		return nil, fae.New(result.Message)
	}

	return result, nil
}
